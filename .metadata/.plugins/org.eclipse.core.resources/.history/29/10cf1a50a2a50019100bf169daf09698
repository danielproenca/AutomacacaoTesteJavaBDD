package br.ce.wcaquino.steps;
import static org.junit.Assert.assertEquals;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.junit.Assert;

import cucumber.api.Transform;
import cucumber.api.java.pt.Dado;
import cucumber.api.java.pt.Então;
import cucumber.api.java.pt.Quando;

public class AprenderCucumber {
	@Dado("^que criei o arquivo corretamente$")
	public void queCrieiOArquivoCorretamente() throws Throwable {

	}

	@Quando("^execultá-lo$")
	public void execultáLo() throws Throwable {

	}

	@Então("^a especificação deve finalizar com sucesso$")
	public void aEspecificaçãoDeveFinalizarComSucesso() throws Throwable {

	}
	
	private int contador = 0;
	
	@Dado("^que o valor do contador é (\\d+)$")
	public void queOValorDoContadorÉ(int arg1) throws Throwable {
		contador = arg1;
	}

	@Quando("^eu incrimentar em (\\d+)$")
	public void euIncrimentarEm(int arg1) throws Throwable {
		contador = contador + arg1;
	}

	@Então("^o valor do contador será (\\d+)$")
	public void oValorDoContadorSerá(int arg1) throws Throwable {
		//Assert.assertTrue(contador == arg1);
		Assert.assertEquals(arg1, contador);
	}
	
	Date entrega = new Date();
	
	@Dado("^que a entrega é dia (.*)$")
	public void queAEntregaÉDia(@Transform(DateConverter.class) Date data) throws Throwable {
		entrega = data;
	}

	@Quando("^a entrega atrasar em (\\d+) dias$")
	public void aEntregaAtrasarEmDias(int dias) throws Throwable {
		
		Calendar cal = Calendar.getInstance();
		cal.setTime(entrega);
		cal.add(Calendar.DAY_OF_MONTH, dias);
		entrega = cal.getTime();
	}

	@Então("^a entrega será efetuada em (\\d{2}\\/\\d{2}\\/\\d{4})$")
	public void aEntregaSeráEfetuadaEm(String data) throws Throwable {
		DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
		String dataFormatada = format.format(entrega);
		System.out.println(dataFormatada);
		System.out.println(data);
		assertEquals(data, dataFormatada);
	}
}
//	@Dado("^que o ticket é AF(\\d+)$")
//	public void queOTicketÉAF(int arg1) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Dado("^que o valor da passagem é R\\$ (\\d+),(\\d+)$")
//	public void queOValorDaPassagemÉR$(int arg1, int arg2) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Dado("^que o nome do passageiro é \"([^\"]*)\"$")
//	public void queONomeDoPassageiroÉ(String arg1) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Dado("^que o telefone do passageiro é (\\d+)-(\\d+)$")
//	public void queOTelefoneDoPassageiroÉ(int arg1, int arg2) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Quando("^criar os steps$")
//	public void criarOsSteps() throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Então("^o teste vai funcionar$")
//	public void oTesteVaiFuncionar() throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Dado("^que o ticket é AB(\\d+)$")
//	public void queOTicketÉAB(int arg1) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Dado("^que o ticket especial é AB(\\d+)$")
//	public void queOTicketEspecialÉAB(int arg1) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Dado("^que o ticket é CD(\\d+)$")
//	public void queOTicketÉCD(int arg1) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Dado("^que o ticket é AG(\\d+)$")
//	public void queOTicketÉAG(int arg1) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//
//	@Dado("^que o valor da passagem é R\\$ (\\d+)\\.(\\d+),(\\d+)$")
//	public void queOValorDaPassagemÉR$(int arg1, int arg2, int arg3) throws Throwable {
//	    // Write code here that turns the phrase above into concrete actions
//	    throw new PendingException();
//	}
//	
//	
//}
